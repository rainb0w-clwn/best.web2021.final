{"ast":null,"code":"import qs from 'query-string';\nimport { store } from '@risingstack/react-easy-state';\nimport io from 'socket.io-client';\nimport { keyBy as _keyBy } from 'lodash';\nimport { SocketEvents } from '../constants';\nconst socket = io(process.env.REACT_APP_API_URL);\nexport const gameStore = store({\n  loading: false,\n  // ERROR\n  errorTimer: null,\n  error: {\n    message: '',\n    show: false\n  },\n  closeError: () => gameStore.error.show = false,\n  popError: errorMessage => {\n    gameStore.error = {\n      message: errorMessage,\n      show: true\n    };\n\n    if (gameStore.errorTimer) {\n      clearTimeout(gameStore.errorTimer);\n    }\n\n    gameStore.errorTimer = setTimeout(() => {\n      gameStore.closeError();\n    }, 4000);\n  },\n  // INFO\n  infoTimer: null,\n  info: {\n    message: '',\n    show: false\n  },\n  closeInfo: () => gameStore.info.show = false,\n  popInfo: infoMessage => {\n    gameStore.info = {\n      message: infoMessage,\n      show: true\n    };\n\n    if (gameStore.infoTimer) {\n      clearTimeout(gameStore.infoTimer);\n    }\n\n    gameStore.infoTimer = setTimeout(() => {\n      gameStore.closeInfo();\n    }, 4000);\n  },\n  // HELPERS\n  setGame: game => {\n    Object.keys(game).forEach(key => {\n      if (key === 'systems') {\n        gameStore.systems = game.systems.reduce((acc, {\n          system_id,\n          state\n        }) => ({ ...acc,\n          [system_id]: state\n        }), {});\n      } else if (key === 'mitigations') {\n        gameStore.mitigations = game.mitigations.reduce((acc, {\n          mitigation_id,\n          location,\n          state\n        }) => ({ ...acc,\n          [`${mitigation_id}_${location}`]: state\n        }), {});\n        gameStore.preparationMitigations = game.mitigations.reduce((acc, {\n          mitigation_id,\n          location,\n          preparation\n        }) => ({ ...acc,\n          [`${mitigation_id}_${location}`]: preparation\n        }), {});\n      } else if (key === 'injections') {\n        gameStore.injections = _keyBy(game.injections, 'injection_id');\n      } else {\n        gameStore[key] = game[key];\n      }\n    });\n  },\n  emitEvent: (event, params, successInfo) => params ? socket.emit(event, params, ({\n    error\n  }) => {\n    if (error) {\n      gameStore.popError(error);\n    } else if (successInfo) {\n      gameStore.popInfo(successInfo);\n    }\n  }) : socket.emit(event, ({\n    error\n  }) => {\n    if (error) {\n      gameStore.popError(error);\n    } else if (successInfo) {\n      gameStore.popInfo(successInfo);\n    }\n  }),\n  // ACTIONS\n  actions: {\n    enterGame: ({\n      eventType,\n      gameId,\n      rememberGameId\n    }) => {\n      gameStore.loading = true;\n      socket.emit(eventType, gameId, ({\n        error,\n        game\n      }) => {\n        if (!error) {\n          gameStore.setGame(game);\n\n          if (rememberGameId) {\n            localStorage.setItem('gameId', gameId);\n          } else {\n            localStorage.removeItem('gameId');\n          }\n        } else {\n          gameStore.popError(error);\n        }\n\n        gameStore.loading = false;\n      });\n    },\n    resumeSimulation: () => gameStore.emitEvent(SocketEvents.STARTSIMULATION),\n    pauseSimulation: () => gameStore.emitEvent(SocketEvents.PAUSESIMULATION),\n    finishSimulation: () => gameStore.emitEvent(SocketEvents.FINISHSIMULATION),\n    toggleMitigation: (params, showInfo = false) => gameStore.emitEvent(SocketEvents.CHANGEMITIGATION, params, ...(showInfo ? ['Item bought'] : [])),\n    performAction: params => gameStore.emitEvent(SocketEvents.PERFORMACTION, params, 'Action Performed'),\n    performCurveball: params => gameStore.emitEvent(SocketEvents.PERFORMCURVEBALL, params, 'Curveball Performed'),\n    restoreSystem: params => gameStore.emitEvent(SocketEvents.RESTORESYSTEM, params, 'System Restored'),\n    startSimulation: () => gameStore.emitEvent(SocketEvents.STARTSIMULATION),\n    deliverInjection: params => gameStore.emitEvent(SocketEvents.DELIVERINJECTION, params),\n    respondToInjection: params => gameStore.emitEvent(SocketEvents.RESPONDTOINJECTION, params, 'Response made'),\n    nonCorrectRespondToInjection: params => gameStore.emitEvent(SocketEvents.NONCORRECTRESPONDTOINJECTION, params, 'Response made')\n  }\n});\nsocket.on(SocketEvents.CONNECT, () => {\n  gameStore.socketConnected = true;\n}); // LISTEN TO GAME STATE UPDATES\n\nsocket.on(SocketEvents.GAMEUPDATED, g => gameStore.setGame(g)); // RECONNECT GAME ROOM IF CONNECTION LOST\n\nsocket.on(SocketEvents.RECONNECT, () => {\n  if (gameStore.id) {\n    socket.emit(SocketEvents.JOINGAME, gameStore.id, ({\n      error,\n      game: g\n    }) => {\n      if (!error) {\n        gameStore.setGame(g);\n      }\n\n      gameStore.popError(error);\n    });\n  }\n}); // AUTO JOIN GAME FORM QUERY PARAMS\n\nconst {\n  gameId: gameIdFromQuery,\n  ...newParams\n} = qs.parse(window.location.search);\n\nif (gameIdFromQuery) {\n  gameStore.loading = true;\n  socket.emit(SocketEvents.JOINGAME, gameIdFromQuery, ({\n    error,\n    game\n  }) => {\n    if (!error) {\n      gameStore.setGame(game);\n      window.history.replaceState(null, null, `?${qs.stringify(newParams)}`);\n      localStorage.setItem('gameId', gameIdFromQuery);\n    } else {\n      gameStore.loading = false;\n    }\n  });\n}","map":{"version":3,"sources":["/home/darrrks/WebstormProjects/test_proj/lol_front/src/components/GameStore.jsx"],"names":["qs","store","io","keyBy","_keyBy","SocketEvents","socket","process","env","REACT_APP_API_URL","gameStore","loading","errorTimer","error","message","show","closeError","popError","errorMessage","clearTimeout","setTimeout","infoTimer","info","closeInfo","popInfo","infoMessage","setGame","game","Object","keys","forEach","key","systems","reduce","acc","system_id","state","mitigations","mitigation_id","location","preparationMitigations","preparation","injections","emitEvent","event","params","successInfo","emit","actions","enterGame","eventType","gameId","rememberGameId","localStorage","setItem","removeItem","resumeSimulation","STARTSIMULATION","pauseSimulation","PAUSESIMULATION","finishSimulation","FINISHSIMULATION","toggleMitigation","showInfo","CHANGEMITIGATION","performAction","PERFORMACTION","performCurveball","PERFORMCURVEBALL","restoreSystem","RESTORESYSTEM","startSimulation","deliverInjection","DELIVERINJECTION","respondToInjection","RESPONDTOINJECTION","nonCorrectRespondToInjection","NONCORRECTRESPONDTOINJECTION","on","CONNECT","socketConnected","GAMEUPDATED","g","RECONNECT","id","JOINGAME","gameIdFromQuery","newParams","parse","window","search","history","replaceState","stringify"],"mappings":"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","sourcesContent":["import qs from 'query-string';\nimport { store } from '@risingstack/react-easy-state';\nimport io from 'socket.io-client';\nimport { keyBy as _keyBy } from 'lodash';\n\nimport { SocketEvents } from '../constants';\n\nconst socket = io(process.env.REACT_APP_API_URL);\n\nexport const gameStore = store({\n  loading: false,\n\n  // ERROR\n  errorTimer: null,\n  error: {\n    message: '',\n    show: false,\n  },\n  closeError: () => (gameStore.error.show = false),\n  popError: (errorMessage) => {\n    gameStore.error = { message: errorMessage, show: true };\n    if (gameStore.errorTimer) {\n      clearTimeout(gameStore.errorTimer);\n    }\n    gameStore.errorTimer = setTimeout(() => {\n      gameStore.closeError();\n    }, 4000);\n  },\n\n  // INFO\n  infoTimer: null,\n  info: {\n    message: '',\n    show: false,\n  },\n  closeInfo: () => (gameStore.info.show = false),\n  popInfo: (infoMessage) => {\n    gameStore.info = { message: infoMessage, show: true };\n    if (gameStore.infoTimer) {\n      clearTimeout(gameStore.infoTimer);\n    }\n    gameStore.infoTimer = setTimeout(() => {\n      gameStore.closeInfo();\n    }, 4000);\n  },\n\n  // HELPERS\n  setGame: (game) => {\n    Object.keys(game).forEach((key) => {\n      if (key === 'systems') {\n        gameStore.systems = game.systems.reduce(\n          (acc, { system_id, state }) => ({\n            ...acc,\n            [system_id]: state,\n          }),\n          {},\n        );\n      } else if (key === 'mitigations') {\n        gameStore.mitigations = game.mitigations.reduce(\n          (acc, { mitigation_id, location, state }) => ({\n            ...acc,\n            [`${mitigation_id}_${location}`]: state,\n          }),\n          {},\n        );\n        gameStore.preparationMitigations = game.mitigations.reduce(\n          (acc, { mitigation_id, location, preparation }) => ({\n            ...acc,\n            [`${mitigation_id}_${location}`]: preparation,\n          }),\n          {},\n        );\n      } else if (key === 'injections') {\n        gameStore.injections = _keyBy(\n          game.injections,\n          'injection_id',\n        );\n      } else {\n        gameStore[key] = game[key];\n      }\n    });\n  },\n  emitEvent: (event, params, successInfo) =>\n    params\n      ? socket.emit(event, params, ({ error }) => {\n          if (error) {\n            gameStore.popError(error);\n          } else if (successInfo) {\n            gameStore.popInfo(successInfo);\n          }\n        })\n      : socket.emit(event, ({ error }) => {\n          if (error) {\n            gameStore.popError(error);\n          } else if (successInfo) {\n            gameStore.popInfo(successInfo);\n          }\n        }),\n\n  // ACTIONS\n  actions: {\n    enterGame: ({ eventType, gameId, rememberGameId }) => {\n      gameStore.loading = true;\n      socket.emit(eventType, gameId, ({ error, game }) => {\n        if (!error) {\n          gameStore.setGame(game);\n          if (rememberGameId) {\n            localStorage.setItem('gameId', gameId);\n          } else {\n            localStorage.removeItem('gameId');\n          }\n        } else {\n          gameStore.popError(error);\n        }\n        gameStore.loading = false;\n      });\n    },\n    resumeSimulation: () =>\n      gameStore.emitEvent(SocketEvents.STARTSIMULATION),\n    pauseSimulation: () =>\n      gameStore.emitEvent(SocketEvents.PAUSESIMULATION),\n    finishSimulation: () =>\n      gameStore.emitEvent(SocketEvents.FINISHSIMULATION),\n    toggleMitigation: (params, showInfo = false) =>\n      gameStore.emitEvent(\n        SocketEvents.CHANGEMITIGATION,\n        params,\n        ...(showInfo ? ['Item bought'] : []),\n      ),\n    performAction: (params) =>\n      gameStore.emitEvent(\n        SocketEvents.PERFORMACTION,\n        params,\n        'Action Performed',\n      ),\n    performCurveball: (params) =>\n      gameStore.emitEvent(\n        SocketEvents.PERFORMCURVEBALL,\n        params,\n        'Curveball Performed',\n      ),\n    restoreSystem: (params) =>\n      gameStore.emitEvent(\n        SocketEvents.RESTORESYSTEM,\n        params,\n        'System Restored',\n      ),\n    startSimulation: () =>\n      gameStore.emitEvent(SocketEvents.STARTSIMULATION),\n    deliverInjection: (params) =>\n      gameStore.emitEvent(SocketEvents.DELIVERINJECTION, params),\n    respondToInjection: (params) =>\n      gameStore.emitEvent(\n        SocketEvents.RESPONDTOINJECTION,\n        params,\n        'Response made',\n      ),\n    nonCorrectRespondToInjection: (params) =>\n      gameStore.emitEvent(\n        SocketEvents.NONCORRECTRESPONDTOINJECTION,\n        params,\n        'Response made',\n      ),\n  },\n});\n\nsocket.on(SocketEvents.CONNECT, () => {\n  gameStore.socketConnected = true;\n});\n\n// LISTEN TO GAME STATE UPDATES\nsocket.on(SocketEvents.GAMEUPDATED, (g) => gameStore.setGame(g));\n\n// RECONNECT GAME ROOM IF CONNECTION LOST\nsocket.on(SocketEvents.RECONNECT, () => {\n  if (gameStore.id) {\n    socket.emit(\n      SocketEvents.JOINGAME,\n      gameStore.id,\n      ({ error, game: g }) => {\n        if (!error) {\n          gameStore.setGame(g);\n        }\n        gameStore.popError(error);\n      },\n    );\n  }\n});\n\n// AUTO JOIN GAME FORM QUERY PARAMS\nconst { gameId: gameIdFromQuery, ...newParams } = qs.parse(\n  window.location.search,\n);\nif (gameIdFromQuery) {\n  gameStore.loading = true;\n  socket.emit(\n    SocketEvents.JOINGAME,\n    gameIdFromQuery,\n    ({ error, game }) => {\n      if (!error) {\n        gameStore.setGame(game);\n        window.history.replaceState(\n          null,\n          null,\n          `?${qs.stringify(newParams)}`,\n        );\n        localStorage.setItem('gameId', gameIdFromQuery);\n      } else {\n        gameStore.loading = false;\n      }\n    },\n  );\n}\n"]},"metadata":{},"sourceType":"module"}