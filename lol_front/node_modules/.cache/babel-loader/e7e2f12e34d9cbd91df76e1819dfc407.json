{"ast":null,"code":"var _jsxFileName = \"/home/darrrks/WebstormProjects/test_proj/lol_front/src/components/Simulation/Injections/Injection.jsx\";\nimport React, { useMemo, useState } from 'react';\nimport { view } from '@risingstack/react-easy-state';\nimport classNames from 'classnames';\nimport { AiOutlineDown } from 'react-icons/ai';\nimport { Accordion, Card, Row, Col, Form, Modal, Button, Badge } from 'react-bootstrap';\nimport InjectionBody from './InjectionBody';\nimport { gameStore } from '../../GameStore';\nimport { msToMinutesSeconds } from '../../../util';\nconst Injection = view(({\n  injection,\n  prevented,\n  delivered,\n  isDanger,\n  upcoming,\n  canDeliver,\n  canMakeResponse,\n  resolved,\n  gameInjection,\n  isBackground\n}) => {\n  const [showDeliverConfirmation, setShowDeliverConfirmation] = useState(false);\n  const {\n    actions: {\n      deliverInjection\n    }\n  } = gameStore;\n  const bgColor = useMemo(() => {\n    if (resolved || isBackground) {\n      return 'bg-light';\n    }\n\n    if (prevented) {\n      return 'bg-success-light';\n    }\n\n    if (isDanger) {\n      return 'bg-danger-light';\n    }\n\n    if (upcoming) {\n      return 'bg-warning-light';\n    }\n\n    return 'bg-white';\n  }, [upcoming, isDanger, prevented, resolved, isBackground]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Accordion, {\n    className: \"my-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: \"border-primary injection\",\n    style: {\n      borderRadius: '1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Accordion.Toggle, {\n    as: Card.Header,\n    eventKey: \"0\",\n    className: classNames('cursor-pointer border-primary py-3 injection-header', bgColor),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"align-items-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: 6,\n    className: \"font-weight-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }, `${msToMinutesSeconds(injection.trigger_time)} - ${injection.title}`), /*#__PURE__*/React.createElement(Col, {\n    xs: 6,\n    className: \"d-flex justify-content-end align-items-center pl-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, canMakeResponse && /*#__PURE__*/React.createElement(Badge, {\n    pill: true,\n    variant: \"info\",\n    className: \"py-1 mx-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }\n  }, \"NEEDS RESPONSE\"), prevented && /*#__PURE__*/React.createElement(Badge, {\n    pill: true,\n    variant: \"success\",\n    className: \"py-1 mx-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 21\n    }\n  }, \"AVOIDED\"), isBackground && /*#__PURE__*/React.createElement(Badge, {\n    pill: true,\n    variant: \"primary\",\n    className: \"py-1 mx-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 21\n    }\n  }, \"BACKGROUND\"), !upcoming && !delivered && !prevented && /*#__PURE__*/React.createElement(Badge, {\n    pill: true,\n    variant: \"danger\",\n    className: \"py-1 mx-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }\n  }, \"AVAILABLE\"), !prevented && upcoming && /*#__PURE__*/React.createElement(Badge, {\n    pill: true,\n    variant: isDanger ? 'danger' : 'warning',\n    className: \"py-1 mr-1 text-white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 21\n    }\n  }, isDanger ? 'COMING SOON' : 'UPCOMING'), !resolved && (canDeliver || delivered) && /*#__PURE__*/React.createElement(Form.Check, {\n    type: \"switch\",\n    className: classNames('custom-switch-right rounded-pill px-2 py-1', {\n      'select-row': canDeliver\n    }),\n    style: {\n      width: 'fit-content'\n    },\n    id: injection.id,\n    label: isBackground ? /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 27\n      }\n    }, \"Activate background event:\") : /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 27\n      }\n    }, \"Delivered to table (trigger effects):\"),\n    checked: delivered,\n    disabled: delivered,\n    onChange: e => e.target.checked && setShowDeliverConfirmation(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(AiOutlineDown, {\n    className: \"ml-1 text-primary\",\n    fontSize: \"25px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 19\n    }\n  })))), /*#__PURE__*/React.createElement(Accordion.Collapse, {\n    eventKey: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InjectionBody, {\n    injection: injection,\n    prevented: prevented,\n    canMakeResponse: canMakeResponse,\n    bgColor: bgColor,\n    gameInjection: gameInjection,\n    isBackground: isBackground,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(Modal, {\n    show: showDeliverConfirmation,\n    onHide: () => setShowDeliverConfirmation(false),\n    centered: true,\n    dialogClassName: \"finish-confirmation-modal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Body, {\n    className: \"py-4 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"m-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }\n  }, \"Are you sure you want to trigger the effects of the event?\")), /*#__PURE__*/React.createElement(Modal.Footer, {\n    className: \"border-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"outline-primary\",\n    onClick: () => setShowDeliverConfirmation(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }\n  }, \"CLOSE\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    onClick: () => deliverInjection({\n      injectionId: injection.id\n    }) && setShowDeliverConfirmation(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }, \"TRIGGER EFFECTS\"))));\n});\nexport default Injection;","map":{"version":3,"sources":["/home/darrrks/WebstormProjects/test_proj/lol_front/src/components/Simulation/Injections/Injection.jsx"],"names":["React","useMemo","useState","view","classNames","AiOutlineDown","Accordion","Card","Row","Col","Form","Modal","Button","Badge","InjectionBody","gameStore","msToMinutesSeconds","Injection","injection","prevented","delivered","isDanger","upcoming","canDeliver","canMakeResponse","resolved","gameInjection","isBackground","showDeliverConfirmation","setShowDeliverConfirmation","actions","deliverInjection","bgColor","borderRadius","Header","trigger_time","title","width","id","e","target","checked","injectionId"],"mappings":"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","sourcesContent":["import React, { useMemo, useState } from 'react';\nimport { view } from '@risingstack/react-easy-state';\nimport classNames from 'classnames';\nimport { AiOutlineDown } from 'react-icons/ai';\nimport {\n  Accordion,\n  Card,\n  Row,\n  Col,\n  Form,\n  Modal,\n  Button,\n  Badge,\n} from 'react-bootstrap';\n\nimport InjectionBody from './InjectionBody';\nimport { gameStore } from '../../GameStore';\nimport { msToMinutesSeconds } from '../../../util';\n\nconst Injection = view(\n  ({\n    injection,\n    prevented,\n    delivered,\n    isDanger,\n    upcoming,\n    canDeliver,\n    canMakeResponse,\n    resolved,\n    gameInjection,\n    isBackground,\n  }) => {\n    const [\n      showDeliverConfirmation,\n      setShowDeliverConfirmation,\n    ] = useState(false);\n\n    const {\n      actions: { deliverInjection },\n    } = gameStore;\n\n    const bgColor = useMemo(() => {\n      if (resolved || isBackground) {\n        return 'bg-light';\n      }\n      if (prevented) {\n        return 'bg-success-light';\n      }\n      if (isDanger) {\n        return 'bg-danger-light';\n      }\n      if (upcoming) {\n        return 'bg-warning-light';\n      }\n      return 'bg-white';\n    }, [upcoming, isDanger, prevented, resolved, isBackground]);\n\n    return (\n      <>\n        <Accordion className=\"my-4\">\n          <Card\n            className=\"border-primary injection\"\n            style={{ borderRadius: '1rem' }}\n          >\n            <Accordion.Toggle\n              as={Card.Header}\n              eventKey=\"0\"\n              className={classNames(\n                'cursor-pointer border-primary py-3 injection-header',\n                bgColor,\n              )}\n            >\n              <Row className=\"align-items-center\">\n                <Col xs={6} className=\"font-weight-bold\">\n                  {`${msToMinutesSeconds(injection.trigger_time)} - ${\n                    injection.title\n                  }`}\n                </Col>\n                <Col\n                  xs={6}\n                  className=\"d-flex justify-content-end align-items-center pl-1\"\n                >\n                  {canMakeResponse && (\n                    <Badge pill variant=\"info\" className=\"py-1 mx-1\">\n                      NEEDS RESPONSE\n                    </Badge>\n                  )}\n                  {prevented && (\n                    <Badge\n                      pill\n                      variant=\"success\"\n                      className=\"py-1 mx-1\"\n                    >\n                      AVOIDED\n                    </Badge>\n                  )}\n                  {isBackground && (\n                    <Badge\n                      pill\n                      variant=\"primary\"\n                      className=\"py-1 mx-1\"\n                    >\n                      BACKGROUND\n                    </Badge>\n                  )}\n                  {!upcoming && !delivered && !prevented && (\n                    <Badge\n                      pill\n                      variant=\"danger\"\n                      className=\"py-1 mx-1\"\n                    >\n                      AVAILABLE\n                    </Badge>\n                  )}\n                  {!prevented && upcoming && (\n                    <Badge\n                      pill\n                      variant={isDanger ? 'danger' : 'warning'}\n                      className=\"py-1 mr-1 text-white\"\n                    >\n                      {isDanger ? 'COMING SOON' : 'UPCOMING'}\n                    </Badge>\n                  )}\n                  {!resolved && (canDeliver || delivered) && (\n                    <Form.Check\n                      type=\"switch\"\n                      className={classNames(\n                        'custom-switch-right rounded-pill px-2 py-1',\n                        { 'select-row': canDeliver },\n                      )}\n                      style={{ width: 'fit-content' }}\n                      id={injection.id}\n                      label={\n                        isBackground ? (\n                          <span>Activate background event:</span>\n                        ) : (\n                          <span>\n                            Delivered to table (trigger effects):\n                          </span>\n                        )\n                      }\n                      checked={delivered}\n                      disabled={delivered}\n                      onChange={(e) =>\n                        e.target.checked &&\n                        setShowDeliverConfirmation(true)\n                      }\n                    />\n                  )}\n                  <AiOutlineDown\n                    className=\"ml-1 text-primary\"\n                    fontSize=\"25px\"\n                  />\n                </Col>\n              </Row>\n            </Accordion.Toggle>\n            <Accordion.Collapse eventKey=\"0\">\n              <InjectionBody\n                injection={injection}\n                prevented={prevented}\n                canMakeResponse={canMakeResponse}\n                bgColor={bgColor}\n                gameInjection={gameInjection}\n                isBackground={isBackground}\n              />\n            </Accordion.Collapse>\n          </Card>\n        </Accordion>\n        <Modal\n          show={showDeliverConfirmation}\n          onHide={() => setShowDeliverConfirmation(false)}\n          centered\n          dialogClassName=\"finish-confirmation-modal\"\n        >\n          <Modal.Body className=\"py-4 text-center\">\n            <h4 className=\"m-0\">\n              Are you sure you want to trigger the effects of the\n              event?\n            </h4>\n          </Modal.Body>\n          <Modal.Footer className=\"border-primary\">\n            <Button\n              variant=\"outline-primary\"\n              onClick={() => setShowDeliverConfirmation(false)}\n            >\n              CLOSE\n            </Button>\n            <Button\n              variant=\"primary\"\n              onClick={() =>\n                deliverInjection({\n                  injectionId: injection.id,\n                }) && setShowDeliverConfirmation(false)\n              }\n            >\n              TRIGGER EFFECTS\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    );\n  },\n);\n\nexport default Injection;\n"]},"metadata":{},"sourceType":"module"}