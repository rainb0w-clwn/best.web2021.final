{"ast":null,"code":"var _jsxFileName = \"/home/darrrks/WebstormProjects/test_proj/lol_front/src/components/EventLogs/EventLogSwitch.jsx\";\nimport React, { useMemo } from 'react';\nimport { view } from '@risingstack/react-easy-state';\nimport { Badge } from 'react-bootstrap';\nimport { logTypes } from './EventLogs';\nimport BudgetItemLog from './BudgetItemLog';\nimport CampaignActionLog from './CampaignActionLog';\nimport CurveballEventLog from './CurveballEventLog';\nimport SystemRestoreLog from './SystemRestoreLog';\nimport Log from './Log';\nimport InjectionBody from '../Simulation/Injections/InjectionBody';\nimport { msToMinutesSeconds } from '../../util';\nconst EventLogSwitch = view(({\n  log: {\n    game_timer,\n    description,\n    type,\n    mitigation_type,\n    mitigation_id,\n    response_id,\n    action_id,\n    curveball_id,\n    injection,\n    gameInjection\n  },\n  filter\n}) => {\n  const shouldDisplay = useMemo(() => filter[type] || false, [filter, type]);\n  const eventLog = useMemo(() => {\n    switch (type) {\n      case logTypes.BudgetItem:\n        return /*#__PURE__*/React.createElement(BudgetItemLog, {\n          game_timer: game_timer,\n          type: type,\n          mitigation_type: mitigation_type,\n          mitigation_id: mitigation_id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }\n        });\n\n      case logTypes.SystemRestore:\n        return /*#__PURE__*/React.createElement(SystemRestoreLog, {\n          game_timer: game_timer,\n          type: type,\n          response_id: response_id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }\n        });\n\n      case logTypes.CampaignAction:\n        return /*#__PURE__*/React.createElement(CampaignActionLog, {\n          game_timer: game_timer,\n          type: type,\n          action_id: action_id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }\n        });\n\n      case logTypes.CurveballEvent:\n        return /*#__PURE__*/React.createElement(CurveballEventLog, {\n          game_timer: game_timer,\n          type: type,\n          curveball_id: curveball_id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }\n        });\n\n      case logTypes.ThreatInjected:\n        return /*#__PURE__*/React.createElement(Log, {\n          title: /*#__PURE__*/React.createElement(\"div\", {\n            className: \"d-flex align-items-center\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }\n          }, `${msToMinutesSeconds(game_timer)} -`, ' ', /*#__PURE__*/React.createElement(Badge, {\n            pill: true,\n            variant: \"danger\",\n            className: \"py-1 mx-1\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 19\n            }\n          }, type), `${injection.title} (available from ${msToMinutesSeconds(injection.trigger_time)})`, injection.type === 'Background' && /*#__PURE__*/React.createElement(Badge, {\n            pill: true,\n            variant: \"primary\",\n            className: \"py-1 mx-1\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 21\n            }\n          }, \"BACKGROUND\")),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(InjectionBody, {\n          injection: injection,\n          gameInjection: gameInjection,\n          isBackground: injection.type === 'Background',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }\n        }));\n\n      case logTypes.ThreatPrevented:\n        return /*#__PURE__*/React.createElement(Log, {\n          title: /*#__PURE__*/React.createElement(\"div\", {\n            className: \"d-flex align-items-center\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 17\n            }\n          }, `${msToMinutesSeconds(game_timer)} -`, /*#__PURE__*/React.createElement(Badge, {\n            pill: true,\n            variant: \"success\",\n            className: \"py-1 mx-1\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 19\n            }\n          }, type), `${injection.title} (triggers at ${msToMinutesSeconds(injection.trigger_time)})`, injection.type === 'Background' && /*#__PURE__*/React.createElement(Badge, {\n            pill: true,\n            variant: \"primary\",\n            className: \"py-1 mx-1\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 21\n            }\n          }, \"BACKGROUND\")),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(InjectionBody, {\n          injection: injection,\n          prevented: true,\n          isBackground: injection.type === 'Background',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 15\n          }\n        }));\n\n      case logTypes.GameState:\n        return /*#__PURE__*/React.createElement(Log, {\n          title: /*#__PURE__*/React.createElement(\"div\", {\n            className: \"d-flex align-items-center\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }\n          }, `${msToMinutesSeconds(game_timer)} -`, /*#__PURE__*/React.createElement(Badge, {\n            pill: true,\n            variant: \"primary\",\n            className: \"py-1 mx-1\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 19\n            }\n          }, type), description),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }\n        });\n\n      default:\n        return null;\n    }\n  }, [type, game_timer, mitigation_type, mitigation_id, response_id, action_id, curveball_id, injection, gameInjection, description]);\n  return shouldDisplay && eventLog;\n});\nexport default EventLogSwitch;","map":{"version":3,"sources":["/home/darrrks/WebstormProjects/test_proj/lol_front/src/components/EventLogs/EventLogSwitch.jsx"],"names":["React","useMemo","view","Badge","logTypes","BudgetItemLog","CampaignActionLog","CurveballEventLog","SystemRestoreLog","Log","InjectionBody","msToMinutesSeconds","EventLogSwitch","log","game_timer","description","type","mitigation_type","mitigation_id","response_id","action_id","curveball_id","injection","gameInjection","filter","shouldDisplay","eventLog","BudgetItem","SystemRestore","CampaignAction","CurveballEvent","ThreatInjected","title","trigger_time","ThreatPrevented","GameState"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport { view } from '@risingstack/react-easy-state';\nimport { Badge } from 'react-bootstrap';\n\nimport { logTypes } from './EventLogs';\nimport BudgetItemLog from './BudgetItemLog';\nimport CampaignActionLog from './CampaignActionLog';\nimport CurveballEventLog from './CurveballEventLog';\nimport SystemRestoreLog from './SystemRestoreLog';\nimport Log from './Log';\nimport InjectionBody from '../Simulation/Injections/InjectionBody';\nimport { msToMinutesSeconds } from '../../util';\n\nconst EventLogSwitch = view(\n  ({\n    log: {\n      game_timer,\n      description,\n      type,\n      mitigation_type,\n      mitigation_id,\n      response_id,\n      action_id,\n      curveball_id,\n      injection,\n      gameInjection,\n    },\n    filter,\n  }) => {\n    const shouldDisplay = useMemo(() => filter[type] || false, [\n      filter,\n      type,\n    ]);\n\n    const eventLog = useMemo(() => {\n      switch (type) {\n        case logTypes.BudgetItem:\n          return (\n            <BudgetItemLog\n              game_timer={game_timer}\n              type={type}\n              mitigation_type={mitigation_type}\n              mitigation_id={mitigation_id}\n            />\n          );\n        case logTypes.SystemRestore:\n          return (\n            <SystemRestoreLog\n              game_timer={game_timer}\n              type={type}\n              response_id={response_id}\n            />\n          );\n        case logTypes.CampaignAction:\n          return (\n            <CampaignActionLog\n              game_timer={game_timer}\n              type={type}\n              action_id={action_id}\n            />\n          );\n        case logTypes.CurveballEvent:\n          return (\n            <CurveballEventLog\n              game_timer={game_timer}\n              type={type}\n              curveball_id={curveball_id}\n            />\n          );\n        case logTypes.ThreatInjected:\n          return (\n            <Log\n              title={\n                <div className=\"d-flex align-items-center\">\n                  {`${msToMinutesSeconds(game_timer)} -`}{' '}\n                  <Badge pill variant=\"danger\" className=\"py-1 mx-1\">\n                    {type}\n                  </Badge>\n                  {`${\n                    injection.title\n                  } (available from ${msToMinutesSeconds(\n                    injection.trigger_time,\n                  )})`}\n                  {injection.type === 'Background' && (\n                    <Badge\n                      pill\n                      variant=\"primary\"\n                      className=\"py-1 mx-1\"\n                    >\n                      BACKGROUND\n                    </Badge>\n                  )}\n                </div>\n              }\n            >\n              <InjectionBody\n                injection={injection}\n                gameInjection={gameInjection}\n                isBackground={injection.type === 'Background'}\n              />\n            </Log>\n          );\n        case logTypes.ThreatPrevented:\n          return (\n            <Log\n              title={\n                <div className=\"d-flex align-items-center\">\n                  {`${msToMinutesSeconds(game_timer)} -`}\n                  <Badge pill variant=\"success\" className=\"py-1 mx-1\">\n                    {type}\n                  </Badge>\n                  {`${\n                    injection.title\n                  } (triggers at ${msToMinutesSeconds(\n                    injection.trigger_time,\n                  )})`}\n                  {injection.type === 'Background' && (\n                    <Badge\n                      pill\n                      variant=\"primary\"\n                      className=\"py-1 mx-1\"\n                    >\n                      BACKGROUND\n                    </Badge>\n                  )}\n                </div>\n              }\n            >\n              <InjectionBody\n                injection={injection}\n                prevented\n                isBackground={injection.type === 'Background'}\n              />\n            </Log>\n          );\n        case logTypes.GameState:\n          return (\n            <Log\n              title={\n                <div className=\"d-flex align-items-center\">\n                  {`${msToMinutesSeconds(game_timer)} -`}\n                  <Badge pill variant=\"primary\" className=\"py-1 mx-1\">\n                    {type}\n                  </Badge>\n                  {description}\n                </div>\n              }\n            />\n          );\n        default:\n          return null;\n      }\n    }, [\n      type,\n      game_timer,\n      mitigation_type,\n      mitigation_id,\n      response_id,\n      action_id,\n      curveball_id,\n      injection,\n      gameInjection,\n      description,\n    ]);\n\n    return shouldDisplay && eventLog;\n  },\n);\n\nexport default EventLogSwitch;\n"]},"metadata":{},"sourceType":"module"}