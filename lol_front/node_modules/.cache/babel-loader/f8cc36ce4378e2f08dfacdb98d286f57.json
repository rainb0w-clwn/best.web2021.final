{"ast":null,"code":"var _jsxFileName = \"/home/darrrks/WebstormProjects/test_proj/lol_front/src/components/Simulation/Injections/ResolvedInjections.jsx\";\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { view } from '@risingstack/react-easy-state';\nimport Injection from './Injection';\nconst ResolvedInjections = view(({\n  className,\n  resolvedInjections\n}) => /*#__PURE__*/React.createElement(Row, {\n  className: className,\n  id: \"resolved_injects\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(Col, {\n  xs: 12,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(\"h2\", {\n  className: \"font-weight-bold\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }\n}, \"RESOLVED EVENTS:\")), /*#__PURE__*/React.createElement(Col, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 7\n  }\n}, resolvedInjections.length ? resolvedInjections.map(({\n  injection,\n  upcoming,\n  canDeliver,\n  canMakeResponse,\n  prevented,\n  delivered,\n  isDanger,\n  resolved,\n  gameInjection,\n  isBackground\n}) => /*#__PURE__*/React.createElement(Injection, {\n  injection: injection,\n  key: injection.id,\n  prevented: prevented,\n  delivered: delivered,\n  isDanger: isDanger,\n  upcoming: upcoming,\n  canDeliver: canDeliver,\n  canMakeResponse: canMakeResponse,\n  resolved: resolved,\n  gameInjection: gameInjection,\n  isBackground: isBackground,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 17\n  }\n})) : 'No event resolved.')));\nexport default ResolvedInjections;","map":{"version":3,"sources":["/home/darrrks/WebstormProjects/test_proj/lol_front/src/components/Simulation/Injections/ResolvedInjections.jsx"],"names":["React","Row","Col","view","Injection","ResolvedInjections","className","resolvedInjections","length","map","injection","upcoming","canDeliver","canMakeResponse","prevented","delivered","isDanger","resolved","gameInjection","isBackground","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,iBAAzB;AACA,SAASC,IAAT,QAAqB,+BAArB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,MAAMC,kBAAkB,GAAGF,IAAI,CAC7B,CAAC;AAAEG,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,kBACE,oBAAC,GAAD;AAAK,EAAA,SAAS,EAAED,SAAhB;AAA2B,EAAA,EAAE,EAAC,kBAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,GAAD;AAAK,EAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE;AAAI,EAAA,SAAS,EAAC,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CADF,eAIE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACGC,kBAAkB,CAACC,MAAnB,GACGD,kBAAkB,CAACE,GAAnB,CACE,CAAC;AACCC,EAAAA,SADD;AAECC,EAAAA,QAFD;AAGCC,EAAAA,UAHD;AAICC,EAAAA,eAJD;AAKCC,EAAAA,SALD;AAMCC,EAAAA,SAND;AAOCC,EAAAA,QAPD;AAQCC,EAAAA,QARD;AASCC,EAAAA,aATD;AAUCC,EAAAA;AAVD,CAAD,kBAYE,oBAAC,SAAD;AACE,EAAA,SAAS,EAAET,SADb;AAEE,EAAA,GAAG,EAAEA,SAAS,CAACU,EAFjB;AAGE,EAAA,SAAS,EAAEN,SAHb;AAIE,EAAA,SAAS,EAAEC,SAJb;AAKE,EAAA,QAAQ,EAAEC,QALZ;AAME,EAAA,QAAQ,EAAEL,QANZ;AAOE,EAAA,UAAU,EAAEC,UAPd;AAQE,EAAA,eAAe,EAAEC,eARnB;AASE,EAAA,QAAQ,EAAEI,QATZ;AAUE,EAAA,aAAa,EAAEC,aAVjB;AAWE,EAAA,YAAY,EAAEC,YAXhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAbJ,CADH,GA6BG,oBA9BN,CAJF,CAF2B,CAA/B;AA0CA,eAAed,kBAAf","sourcesContent":["import React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { view } from '@risingstack/react-easy-state';\n\nimport Injection from './Injection';\n\nconst ResolvedInjections = view(\n  ({ className, resolvedInjections }) => (\n    <Row className={className} id=\"resolved_injects\">\n      <Col xs={12}>\n        <h2 className=\"font-weight-bold\">RESOLVED EVENTS:</h2>\n      </Col>\n      <Col>\n        {resolvedInjections.length\n          ? resolvedInjections.map(\n              ({\n                injection,\n                upcoming,\n                canDeliver,\n                canMakeResponse,\n                prevented,\n                delivered,\n                isDanger,\n                resolved,\n                gameInjection,\n                isBackground,\n              }) => (\n                <Injection\n                  injection={injection}\n                  key={injection.id}\n                  prevented={prevented}\n                  delivered={delivered}\n                  isDanger={isDanger}\n                  upcoming={upcoming}\n                  canDeliver={canDeliver}\n                  canMakeResponse={canMakeResponse}\n                  resolved={resolved}\n                  gameInjection={gameInjection}\n                  isBackground={isBackground}\n                />\n              ),\n            )\n          : 'No event resolved.'}\n      </Col>\n    </Row>\n  ),\n);\n\nexport default ResolvedInjections;\n"]},"metadata":{},"sourceType":"module"}