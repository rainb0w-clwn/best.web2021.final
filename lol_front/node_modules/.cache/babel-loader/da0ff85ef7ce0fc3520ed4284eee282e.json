{"ast":null,"code":"var _jsxFileName = \"/home/darrrks/WebstormProjects/test_proj/lol_front/src/components/Simulation/Injections/InjectionBody.jsx\";\nimport React from 'react';\nimport { Card, Row, Col } from 'react-bootstrap';\nimport { view } from '@risingstack/react-easy-state';\nimport classNames from 'classnames';\nimport InjectionResponseForm from './InjectionResponseForm';\nimport { useStaticData } from '../../StaticDataProvider';\nimport { msToMinutesSeconds } from '../../../util';\nconst InjectionBody = view(({\n  injection,\n  prevented,\n  canMakeResponse,\n  bgColor = '',\n  gameInjection,\n  isBackground\n}) => {\n  var _injection$systems_to, _injections$injection;\n\n  const {\n    systems,\n    injections\n  } = useStaticData();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Card.Body, {\n    className: classNames('border-top border-primary injection-body', bgColor, {\n      'border-bottom': injection.recommendations || !prevented && !isBackground\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: 12,\n    className: \"my-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-weight-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 15\n    }\n  }, \"Description: \"), injection.description), /*#__PURE__*/React.createElement(Col, {\n    xs: 12,\n    className: \"my-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: 6,\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-weight-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 19\n    }\n  }, \"Recipient:\", ' '), injection.recipient_role || '-'), /*#__PURE__*/React.createElement(Col, {\n    xs: 6,\n    md: 4,\n    className: classNames({\n      'text-disabled': prevented\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-weight-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 19\n    }\n  }, \"Systems disabled:\", ' '), ((_injection$systems_to = injection.systems_to_disable) === null || _injection$systems_to === void 0 ? void 0 : _injection$systems_to.length) ? injection.systems_to_disable.map(id => systems[id].name) : '-'), /*#__PURE__*/React.createElement(Col, {\n    xs: 6,\n    md: 2,\n    className: classNames({\n      'text-disabled': prevented\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-weight-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 19\n    }\n  }, \"Polls: \"), injection.poll_change ? `${injection.poll_change}%` : '-'), /*#__PURE__*/React.createElement(Col, {\n    xs: 6,\n    md: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-weight-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 19\n    }\n  }, \"Avoided: \"), prevented ? 'YES' : 'NO'))), /*#__PURE__*/React.createElement(Col, {\n    xs: 12,\n    className: \"my-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: 6,\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-weight-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 19\n    }\n  }, \"Asset to deliver to table:\", ' '), injection.asset_code), injection.followup_injecion && /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-weight-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  }, \"Follow up:\", ' '), `${msToMinutesSeconds(injections[injection.followup_injecion].trigger_time)} - ${injections[injection.followup_injecion].title} (${((_injections$injection = injections[injection.followup_injecion].location) === null || _injections$injection === void 0 ? void 0 : _injections$injection.toUpperCase()) || 'PARTY'})`))))), !prevented && !isBackground && /*#__PURE__*/React.createElement(Card.Body, {\n    className: classNames('border-primary injection-body', bgColor, {\n      'border-bottom': injection.recommendations\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InjectionResponseForm, {\n    injection: injection,\n    gameInjection: gameInjection,\n    disabled: !canMakeResponse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  })), injection.recommendations && /*#__PURE__*/React.createElement(Card.Body, {\n    className: classNames('injection-body', bgColor),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-weight-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }, \"Security Recommendations:\", ' '), injection.recommendations))));\n});\nexport default InjectionBody;","map":{"version":3,"sources":["/home/darrrks/WebstormProjects/test_proj/lol_front/src/components/Simulation/Injections/InjectionBody.jsx"],"names":["React","Card","Row","Col","view","classNames","InjectionResponseForm","useStaticData","msToMinutesSeconds","InjectionBody","injection","prevented","canMakeResponse","bgColor","gameInjection","isBackground","systems","injections","recommendations","description","recipient_role","systems_to_disable","length","map","id","name","poll_change","asset_code","followup_injecion","trigger_time","title","location","toUpperCase"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Card, Row, Col } from 'react-bootstrap';\nimport { view } from '@risingstack/react-easy-state';\nimport classNames from 'classnames';\n\nimport InjectionResponseForm from './InjectionResponseForm';\nimport { useStaticData } from '../../StaticDataProvider';\nimport { msToMinutesSeconds } from '../../../util';\n\nconst InjectionBody = view(\n  ({\n    injection,\n    prevented,\n    canMakeResponse,\n    bgColor = '',\n    gameInjection,\n    isBackground,\n  }) => {\n    const { systems, injections } = useStaticData();\n\n    return (\n      <div>\n        <Card.Body\n          className={classNames(\n            'border-top border-primary injection-body',\n            bgColor,\n            {\n              'border-bottom':\n                injection.recommendations ||\n                (!prevented && !isBackground),\n            },\n          )}\n        >\n          <Row>\n            <Col xs={12} className=\"my-2\">\n              <span className=\"font-weight-bold\">Description: </span>\n              {injection.description}\n            </Col>\n            <Col xs={12} className=\"my-2\">\n              <Row>\n                <Col xs={6} md={4}>\n                  <span className=\"font-weight-bold\">\n                    Recipient:{' '}\n                  </span>\n                  {injection.recipient_role || '-'}\n                </Col>\n                <Col\n                  xs={6}\n                  md={4}\n                  className={classNames({\n                    'text-disabled': prevented,\n                  })}\n                >\n                  <span className=\"font-weight-bold\">\n                    Systems disabled:{' '}\n                  </span>\n                  {injection.systems_to_disable?.length\n                    ? injection.systems_to_disable.map(\n                        (id) => systems[id].name,\n                      )\n                    : '-'}\n                </Col>\n                <Col\n                  xs={6}\n                  md={2}\n                  className={classNames({\n                    'text-disabled': prevented,\n                  })}\n                >\n                  <span className=\"font-weight-bold\">Polls: </span>\n                  {injection.poll_change\n                    ? `${injection.poll_change}%`\n                    : '-'}\n                </Col>\n                <Col xs={6} md={2}>\n                  <span className=\"font-weight-bold\">Avoided: </span>\n                  {prevented ? 'YES' : 'NO'}\n                </Col>\n              </Row>\n            </Col>\n            <Col xs={12} className=\"my-2\">\n              <Row>\n                <Col xs={6} md={4}>\n                  <span className=\"font-weight-bold\">\n                    Asset to deliver to table:{' '}\n                  </span>\n                  {injection.asset_code}\n                </Col>\n                {injection.followup_injecion && (\n                  <Col>\n                    <span className=\"font-weight-bold\">\n                      Follow up:{' '}\n                    </span>\n                    {`${msToMinutesSeconds(\n                      injections[injection.followup_injecion]\n                        .trigger_time,\n                    )} - ${\n                      injections[injection.followup_injecion].title\n                    } (${\n                      injections[\n                        injection.followup_injecion\n                      ].location?.toUpperCase() || 'PARTY'\n                    })`}\n                  </Col>\n                )}\n              </Row>\n            </Col>\n          </Row>\n        </Card.Body>\n        {!prevented && !isBackground && (\n          <Card.Body\n            className={classNames(\n              'border-primary injection-body',\n              bgColor,\n              { 'border-bottom': injection.recommendations },\n            )}\n          >\n            <InjectionResponseForm\n              injection={injection}\n              gameInjection={gameInjection}\n              disabled={!canMakeResponse}\n            />\n          </Card.Body>\n        )}\n        {injection.recommendations && (\n          <Card.Body\n            className={classNames('injection-body', bgColor)}\n          >\n            <Row>\n              <Col xs={12}>\n                <span className=\"font-weight-bold\">\n                  Security Recommendations:{' '}\n                </span>\n                {injection.recommendations}\n              </Col>\n            </Row>\n          </Card.Body>\n        )}\n      </div>\n    );\n  },\n);\n\nexport default InjectionBody;\n"]},"metadata":{},"sourceType":"module"}