{"ast":null,"code":"var _jsxFileName = \"/home/darrrks/WebstormProjects/test_proj/lol_front/src/components/Simulation/Injections/InjectionResponseForm.jsx\";\nimport React, { useMemo } from 'react';\nimport { Row, Col, Button, Form } from 'react-bootstrap';\nimport { view, store } from '@risingstack/react-easy-state';\nimport { AiOutlineCheck } from 'react-icons/ai';\nimport { gameStore } from '../../GameStore';\nimport { useStaticData } from '../../StaticDataProvider';\nimport { msToMinutesSeconds } from '../../../util';\nconst InjectionResponseForm = view(({\n  injection,\n  disabled,\n  gameInjection\n}) => {\n  const {\n    actions: {\n      respondToInjection,\n      nonCorrectRespondToInjection\n    },\n    mitigations: gameMitigations\n  } = gameStore;\n  const {\n    responses,\n    systems\n  } = useStaticData();\n  const madeResponses = useMemo(() => {\n    var _gameInjection$predef, _gameInjection$predef2;\n\n    return gameInjection && gameInjection.response_made_at && {\n      none: !((_gameInjection$predef = gameInjection.predefined_responses_made) === null || _gameInjection$predef === void 0 ? void 0 : _gameInjection$predef.length) && !gameInjection.is_response_correct && !gameInjection.custom_response,\n      selectedResponses: new Set(((_gameInjection$predef2 = gameInjection.predefined_responses_made) === null || _gameInjection$predef2 === void 0 ? void 0 : _gameInjection$predef2.length) ? gameInjection.predefined_responses_made : []),\n      customCorrectResponse: gameInjection.is_response_correct && gameInjection.custom_response || '',\n      customIncorrectResponse: !gameInjection.is_response_correct && gameInjection.custom_response || ''\n    };\n  }, [gameInjection]);\n  const formStore = store({\n    none: false,\n    selectedResponses: new Set(),\n    isCustomCorrectResponse: false,\n    customCorrectResponse: '',\n    isCustomIncorrectResponse: false,\n    customIncorrectResponse: '',\n    deselectIncorrects: () => {\n      formStore.none = false;\n      formStore.isCustomIncorrectResponse = false;\n      formStore.customIncorrectResponse = '';\n    },\n    selectCustomIncorrect: () => {\n      formStore.selectedResponses = new Set();\n      formStore.isCustomCorrectResponse = false;\n      formStore.customCorrectResponse = '';\n      formStore.none = false;\n      formStore.isCustomIncorrectResponse = true;\n    },\n    selectNone: () => {\n      formStore.selectedResponses = new Set();\n      formStore.isCustomCorrectResponse = false;\n      formStore.customCorrectResponse = '';\n      formStore.isCustomIncorrectResponse = false;\n      formStore.customIncorrectResponse = '';\n      formStore.none = true;\n    },\n    submitResponses: () => {\n      if (formStore.none) {\n        nonCorrectRespondToInjection({\n          injectionId: injection.id\n        });\n      } else if (formStore.isCustomIncorrectResponse && formStore.customIncorrectResponse) {\n        nonCorrectRespondToInjection({\n          injectionId: injection.id,\n          customResponse: formStore.customIncorrectResponse\n        });\n      } else {\n        respondToInjection({\n          responseIds: [...formStore.selectedResponses],\n          injectionId: injection.id,\n          ...(formStore.isCustomCorrectResponse && formStore.customCorrectResponse ? {\n            customResponse: formStore.customCorrectResponse\n          } : {})\n        });\n      }\n    },\n\n    get responseAllowed() {\n      if (formStore.isCustomIncorrectResponse) {\n        return formStore.customIncorrectResponse;\n      }\n\n      if (formStore.isCustomCorrectResponse) {\n        return formStore.customCorrectResponse;\n      }\n\n      return formStore.none || formStore.selectedResponses.size;\n    },\n\n    get responseCost() {\n      return [...formStore.selectedResponses].reduce((acc, id) => acc + responses[id].cost, 0);\n    },\n\n    get restoredSystems() {\n      return [...formStore.selectedResponses].reduce((acc, id) => {\n        var _responses$id$systems;\n\n        return ((_responses$id$systems = responses[id].systems_to_restore) === null || _responses$id$systems === void 0 ? void 0 : _responses$id$systems.length) ? [...acc, ...responses[id].systems_to_restore.map(systemId => systems[systemId].name)] : acc;\n      }, []);\n    }\n\n  });\n  const availableResponses = useMemo(() => {\n    var _injection$responses;\n\n    return (_injection$responses = injection.responses) === null || _injection$responses === void 0 ? void 0 : _injection$responses.filter(({\n      required_mitigation,\n      required_mitigation_type\n    }) => !required_mitigation_type || !required_mitigation || (required_mitigation_type === 'party' ? gameMitigations[`${required_mitigation}_hq`] && gameMitigations[`${required_mitigation}_local`] : gameMitigations[`${required_mitigation}_${required_mitigation_type}`]));\n  }, [injection, gameMitigations]);\n  return /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, !(gameInjection === null || gameInjection === void 0 ? void 0 : gameInjection.response_made_at) ? /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: 8,\n    lg: 9,\n    className: \"font-weight-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 15\n    }\n  }, \"Select correct responses implemented:\"), /*#__PURE__*/React.createElement(Col, {\n    xs: 4,\n    lg: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"outline-primary\",\n    className: \"rounded-pill w-100\",\n    type: \"button\",\n    disabled: disabled || !formStore.responseAllowed,\n    onClick: formStore.submitResponses,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }\n  }, \"RESOLVE EVENT\"))) : /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: 12,\n    lg: 12,\n    className: \"font-weight-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 15\n    }\n  }, \"Correct responses implemented (at\", ' ', msToMinutesSeconds(gameInjection.response_made_at), \")\"))), /*#__PURE__*/React.createElement(Col, {\n    xs: 12,\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }, availableResponses === null || availableResponses === void 0 ? void 0 : availableResponses.map(response => /*#__PURE__*/React.createElement(Form.Check, {\n    type: \"switch\",\n    className: \"py-1\",\n    style: {\n      width: 'fit-content'\n    },\n    key: `${injection.id}_${response.id}`,\n    id: `${injection.id}_${response.id}`,\n    label: /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }\n    }, response.description, \" (Cost: $\", responses[response.id].cost, \")\"),\n    disabled: disabled,\n    checked: madeResponses ? madeResponses.selectedResponses.has(response.id) : formStore.selectedResponses.has(response.id),\n    onChange: e => {\n      if (e.target.checked) {\n        formStore.deselectIncorrects();\n        formStore.selectedResponses.add(response.id);\n      } else {\n        formStore.selectedResponses.delete(response.id);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Form.Check, {\n    type: \"switch\",\n    className: \"py-1\",\n    style: {\n      width: 'fit-content'\n    },\n    id: `${injection.id}_custom_corrrect`,\n    label: /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex\",\n      style: {\n        whiteSpace: 'nowrap'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 15\n      }\n    }, \"CUSTOM CORRECT (will prevent follow up):\", /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"text\",\n      maxLength: 250,\n      disabled: !formStore.isCustomCorrectResponse || (gameInjection === null || gameInjection === void 0 ? void 0 : gameInjection.response_made_at),\n      placeholder: \"Correct response\",\n      onChange: event => {\n        formStore.customCorrectResponse = event.target.value;\n      },\n      value: madeResponses ? madeResponses.customCorrectResponse : formStore.customCorrectResponse || '',\n      autoComplete: \"off\",\n      style: {\n        fontSize: '1rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }\n    })),\n    disabled: disabled,\n    checked: madeResponses ? madeResponses.customCorrectResponse : formStore.isCustomCorrectResponse,\n    onChange: e => {\n      if (e.target.checked) {\n        formStore.deselectIncorrects();\n        formStore.isCustomCorrectResponse = true;\n      } else {\n        formStore.isCustomCorrectResponse = false;\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Form.Check, {\n    type: \"switch\",\n    className: \"custom-switch-red py-1\",\n    style: {\n      width: 'fit-content'\n    },\n    id: `${injection.id}_custom_incorrrect`,\n    label: /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex\",\n      style: {\n        whiteSpace: 'nowrap'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 15\n      }\n    }, \"CUSTOM INCORRECT:\", /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"text\",\n      maxLength: 250,\n      disabled: !formStore.isCustomIncorrectResponse || (gameInjection === null || gameInjection === void 0 ? void 0 : gameInjection.response_made_at),\n      placeholder: \"Incorrect response\",\n      onChange: event => {\n        formStore.customIncorrectResponse = event.target.value;\n      },\n      value: madeResponses ? madeResponses.customIncorrectResponse : formStore.customIncorrectResponse || '',\n      autoComplete: \"off\",\n      style: {\n        fontSize: '1rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 17\n      }\n    })),\n    disabled: disabled,\n    checked: madeResponses ? madeResponses.customIncorrectResponse : formStore.isCustomIncorrectResponse,\n    onChange: e => {\n      if (e.target.checked) {\n        formStore.selectCustomIncorrect();\n      } else {\n        formStore.isCustomIncorrectResponse = false;\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Form.Check, {\n    type: \"switch\",\n    className: \"custom-switch-red py-1\",\n    style: {\n      width: 'fit-content'\n    },\n    id: `${injection.id}_none`,\n    label: /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 20\n      }\n    }, \"NO RESPONSE\"),\n    disabled: disabled,\n    checked: madeResponses ? madeResponses.none : formStore.none,\n    onChange: e => {\n      if (e.target.checked) {\n        formStore.selectNone();\n      } else {\n        formStore.none = false;\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    xs: 12,\n    className: \"my-2 font-weight-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 9\n    }\n  }, \"Effect of implemented responses:\"), /*#__PURE__*/React.createElement(Col, {\n    xs: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AiOutlineCheck, {\n    className: \"mr-2\",\n    fontSize: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 11\n    }\n  }), \"$\", formStore.responseCost, \" spent\"), /*#__PURE__*/React.createElement(Col, {\n    xs: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AiOutlineCheck, {\n    className: \"mr-2\",\n    fontSize: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 11\n    }\n  }), formStore.restoredSystems.length ? formStore.restoredSystems : 'No system restored'));\n});\nexport default InjectionResponseForm;","map":{"version":3,"sources":["/home/darrrks/WebstormProjects/test_proj/lol_front/src/components/Simulation/Injections/InjectionResponseForm.jsx"],"names":["React","useMemo","Row","Col","Button","Form","view","store","AiOutlineCheck","gameStore","useStaticData","msToMinutesSeconds","InjectionResponseForm","injection","disabled","gameInjection","actions","respondToInjection","nonCorrectRespondToInjection","mitigations","gameMitigations","responses","systems","madeResponses","response_made_at","none","predefined_responses_made","length","is_response_correct","custom_response","selectedResponses","Set","customCorrectResponse","customIncorrectResponse","formStore","isCustomCorrectResponse","isCustomIncorrectResponse","deselectIncorrects","selectCustomIncorrect","selectNone","submitResponses","injectionId","id","customResponse","responseIds","responseAllowed","size","responseCost","reduce","acc","cost","restoredSystems","systems_to_restore","map","systemId","name","availableResponses","filter","required_mitigation","required_mitigation_type","response","width","description","has","e","target","checked","add","delete","whiteSpace","event","value","fontSize"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport { Row, Col, Button, Form } from 'react-bootstrap';\nimport { view, store } from '@risingstack/react-easy-state';\nimport { AiOutlineCheck } from 'react-icons/ai';\n\nimport { gameStore } from '../../GameStore';\nimport { useStaticData } from '../../StaticDataProvider';\nimport { msToMinutesSeconds } from '../../../util';\n\nconst InjectionResponseForm = view(\n  ({ injection, disabled, gameInjection }) => {\n    const {\n      actions: { respondToInjection, nonCorrectRespondToInjection },\n      mitigations: gameMitigations,\n    } = gameStore;\n    const { responses, systems } = useStaticData();\n\n    const madeResponses = useMemo(\n      () =>\n        gameInjection &&\n        gameInjection.response_made_at && {\n          none:\n            !gameInjection.predefined_responses_made?.length &&\n            !gameInjection.is_response_correct &&\n            !gameInjection.custom_response,\n          selectedResponses: new Set(\n            gameInjection.predefined_responses_made?.length\n              ? gameInjection.predefined_responses_made\n              : [],\n          ),\n          customCorrectResponse:\n            (gameInjection.is_response_correct &&\n              gameInjection.custom_response) ||\n            '',\n          customIncorrectResponse:\n            (!gameInjection.is_response_correct &&\n              gameInjection.custom_response) ||\n            '',\n        },\n      [gameInjection],\n    );\n\n    const formStore = store({\n      none: false,\n      selectedResponses: new Set(),\n      isCustomCorrectResponse: false,\n      customCorrectResponse: '',\n      isCustomIncorrectResponse: false,\n      customIncorrectResponse: '',\n      deselectIncorrects: () => {\n        formStore.none = false;\n        formStore.isCustomIncorrectResponse = false;\n        formStore.customIncorrectResponse = '';\n      },\n      selectCustomIncorrect: () => {\n        formStore.selectedResponses = new Set();\n        formStore.isCustomCorrectResponse = false;\n        formStore.customCorrectResponse = '';\n        formStore.none = false;\n        formStore.isCustomIncorrectResponse = true;\n      },\n      selectNone: () => {\n        formStore.selectedResponses = new Set();\n        formStore.isCustomCorrectResponse = false;\n        formStore.customCorrectResponse = '';\n        formStore.isCustomIncorrectResponse = false;\n        formStore.customIncorrectResponse = '';\n        formStore.none = true;\n      },\n      submitResponses: () => {\n        if (formStore.none) {\n          nonCorrectRespondToInjection({\n            injectionId: injection.id,\n          });\n        } else if (\n          formStore.isCustomIncorrectResponse &&\n          formStore.customIncorrectResponse\n        ) {\n          nonCorrectRespondToInjection({\n            injectionId: injection.id,\n            customResponse: formStore.customIncorrectResponse,\n          });\n        } else {\n          respondToInjection({\n            responseIds: [...formStore.selectedResponses],\n            injectionId: injection.id,\n            ...(formStore.isCustomCorrectResponse &&\n            formStore.customCorrectResponse\n              ? { customResponse: formStore.customCorrectResponse }\n              : {}),\n          });\n        }\n      },\n      get responseAllowed() {\n        if (formStore.isCustomIncorrectResponse) {\n          return formStore.customIncorrectResponse;\n        }\n        if (formStore.isCustomCorrectResponse) {\n          return formStore.customCorrectResponse;\n        }\n        return formStore.none || formStore.selectedResponses.size;\n      },\n      get responseCost() {\n        return [...formStore.selectedResponses].reduce(\n          (acc, id) => acc + responses[id].cost,\n          0,\n        );\n      },\n      get restoredSystems() {\n        return [...formStore.selectedResponses].reduce(\n          (acc, id) =>\n            responses[id].systems_to_restore?.length\n              ? [\n                  ...acc,\n                  ...responses[id].systems_to_restore.map(\n                    (systemId) => systems[systemId].name,\n                  ),\n                ]\n              : acc,\n          [],\n        );\n      },\n    });\n\n    const availableResponses = useMemo(\n      () =>\n        injection.responses?.filter(\n          ({ required_mitigation, required_mitigation_type }) =>\n            !required_mitigation_type ||\n            !required_mitigation ||\n            (required_mitigation_type === 'party'\n              ? gameMitigations[`${required_mitigation}_hq`] &&\n                gameMitigations[`${required_mitigation}_local`]\n              : gameMitigations[\n                  `${required_mitigation}_${required_mitigation_type}`\n                ]),\n        ),\n      [injection, gameMitigations],\n    );\n\n    return (\n      <Row>\n        <Col xs={12}>\n          {!gameInjection?.response_made_at ? (\n            <Row>\n              <Col xs={8} lg={9} className=\"font-weight-bold\">\n                Select correct responses implemented:\n              </Col>\n              <Col xs={4} lg={3}>\n                <Button\n                  variant=\"outline-primary\"\n                  className=\"rounded-pill w-100\"\n                  type=\"button\"\n                  disabled={disabled || !formStore.responseAllowed}\n                  onClick={formStore.submitResponses}\n                >\n                  RESOLVE EVENT\n                </Button>\n              </Col>\n            </Row>\n          ) : (\n            <Row>\n              <Col xs={12} lg={12} className=\"font-weight-bold\">\n                Correct responses implemented (at{' '}\n                {msToMinutesSeconds(gameInjection.response_made_at)})\n              </Col>\n            </Row>\n          )}\n        </Col>\n        <Col xs={12} className=\"mb-3\">\n          {availableResponses?.map((response) => (\n            <Form.Check\n              type=\"switch\"\n              className=\"py-1\"\n              style={{ width: 'fit-content' }}\n              key={`${injection.id}_${response.id}`}\n              id={`${injection.id}_${response.id}`}\n              label={\n                <span>\n                  {response.description} (Cost: $\n                  {responses[response.id].cost})\n                </span>\n              }\n              disabled={disabled}\n              checked={\n                madeResponses\n                  ? madeResponses.selectedResponses.has(response.id)\n                  : formStore.selectedResponses.has(response.id)\n              }\n              onChange={(e) => {\n                if (e.target.checked) {\n                  formStore.deselectIncorrects();\n                  formStore.selectedResponses.add(response.id);\n                } else {\n                  formStore.selectedResponses.delete(response.id);\n                }\n              }}\n            />\n          ))}\n          <Form.Check\n            type=\"switch\"\n            className=\"py-1\"\n            style={{ width: 'fit-content' }}\n            id={`${injection.id}_custom_corrrect`}\n            label={\n              <div\n                className=\"d-flex\"\n                style={{ whiteSpace: 'nowrap' }}\n              >\n                CUSTOM CORRECT (will prevent follow up):\n                <Form.Control\n                  type=\"text\"\n                  maxLength={250}\n                  disabled={\n                    !formStore.isCustomCorrectResponse ||\n                    gameInjection?.response_made_at\n                  }\n                  placeholder=\"Correct response\"\n                  onChange={(event) => {\n                    formStore.customCorrectResponse =\n                      event.target.value;\n                  }}\n                  value={\n                    madeResponses\n                      ? madeResponses.customCorrectResponse\n                      : formStore.customCorrectResponse || ''\n                  }\n                  autoComplete=\"off\"\n                  style={{ fontSize: '1rem' }}\n                />\n              </div>\n            }\n            disabled={disabled}\n            checked={\n              madeResponses\n                ? madeResponses.customCorrectResponse\n                : formStore.isCustomCorrectResponse\n            }\n            onChange={(e) => {\n              if (e.target.checked) {\n                formStore.deselectIncorrects();\n                formStore.isCustomCorrectResponse = true;\n              } else {\n                formStore.isCustomCorrectResponse = false;\n              }\n            }}\n          />\n          <Form.Check\n            type=\"switch\"\n            className=\"custom-switch-red py-1\"\n            style={{ width: 'fit-content' }}\n            id={`${injection.id}_custom_incorrrect`}\n            label={\n              <div\n                className=\"d-flex\"\n                style={{ whiteSpace: 'nowrap' }}\n              >\n                CUSTOM INCORRECT:\n                <Form.Control\n                  type=\"text\"\n                  maxLength={250}\n                  disabled={\n                    !formStore.isCustomIncorrectResponse ||\n                    gameInjection?.response_made_at\n                  }\n                  placeholder=\"Incorrect response\"\n                  onChange={(event) => {\n                    formStore.customIncorrectResponse =\n                      event.target.value;\n                  }}\n                  value={\n                    madeResponses\n                      ? madeResponses.customIncorrectResponse\n                      : formStore.customIncorrectResponse || ''\n                  }\n                  autoComplete=\"off\"\n                  style={{ fontSize: '1rem' }}\n                />\n              </div>\n            }\n            disabled={disabled}\n            checked={\n              madeResponses\n                ? madeResponses.customIncorrectResponse\n                : formStore.isCustomIncorrectResponse\n            }\n            onChange={(e) => {\n              if (e.target.checked) {\n                formStore.selectCustomIncorrect();\n              } else {\n                formStore.isCustomIncorrectResponse = false;\n              }\n            }}\n          />\n          <Form.Check\n            type=\"switch\"\n            className=\"custom-switch-red py-1\"\n            style={{ width: 'fit-content' }}\n            id={`${injection.id}_none`}\n            label={<span>NO RESPONSE</span>}\n            disabled={disabled}\n            checked={\n              madeResponses ? madeResponses.none : formStore.none\n            }\n            onChange={(e) => {\n              if (e.target.checked) {\n                formStore.selectNone();\n              } else {\n                formStore.none = false;\n              }\n            }}\n          />\n        </Col>\n        <Col xs={12} className=\"my-2 font-weight-bold\">\n          Effect of implemented responses:\n        </Col>\n        <Col xs={4}>\n          <AiOutlineCheck className=\"mr-2\" fontSize=\"20px\" />$\n          {formStore.responseCost} spent\n        </Col>\n        <Col xs={8}>\n          <AiOutlineCheck className=\"mr-2\" fontSize=\"20px\" />\n          {formStore.restoredSystems.length\n            ? formStore.restoredSystems\n            : 'No system restored'}\n        </Col>\n      </Row>\n    );\n  },\n);\n\nexport default InjectionResponseForm;\n"]},"metadata":{},"sourceType":"module"}